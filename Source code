import os
import shutil
import zipfile
import re
import threading
import customtkinter as ctk
from tkinter import filedialog

INPUT_XML = "text_namethycompanions.xml"
TEMP_FOLDER = "temp_mod_input"
PAK_NAMES = [
    "English_xml.pak", "Portuguese_xml.pak", "Italian_xml.pak", "Korean_xml.pak",
    "Polish_xml.pak", "Russian_xml.pak", "ChineseS_xml.pak", "ChineseT_xml.pak",
    "Turkish_xml.pak", "Ukrainian_xml.pak", "Czech_xml.pak", "French_xml.pak",
    "German_xml.pak", "Japanese_xml.pak", "Spanish_xml.pak"
]

def replace_names(pebbles, herring, mutt):
    with open(INPUT_XML, 'r', encoding='utf-8') as f:
        content = f.read()
    content = re.sub(r'\bPebbles\b', pebbles, content)
    content = re.sub(r'\bHerring\b', herring, content)
    content = re.sub(r'\bMutt\b', mutt, content)
    return content

def prepare_temp(xml_text):
    if os.path.isdir(TEMP_FOLDER):
        shutil.rmtree(TEMP_FOLDER)
    os.makedirs(TEMP_FOLDER, exist_ok=True)
    with open(os.path.join(TEMP_FOLDER, INPUT_XML), 'w', encoding='utf-8') as f:
        f.write(xml_text)

def pack_pak(pak_name):
    zip_path = pak_name + ".zip"
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        zipf.write(os.path.join(TEMP_FOLDER, INPUT_XML), INPUT_XML)
    if os.path.exists(pak_name):
        os.remove(pak_name)
    os.rename(zip_path, pak_name)

def move_paks(base_path):
    mod_dir = os.path.join(base_path, "x_NameThyCompanions")
    loc_dir = os.path.join(mod_dir, "Localization")
    os.makedirs(loc_dir, exist_ok=True)
    for pak in PAK_NAMES:
        dst = os.path.join(loc_dir, pak)
        if os.path.exists(dst):
            os.remove(dst)
        shutil.move(pak, dst)
    manifest = """<?xml version="1.0" encoding="utf-8"?>
<kcd_mod xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <info>
    <name>Name Thy Companions</name>
    <modid>namethycompanions</modid>
    <description>Renames your companions!</description>
    <author>Ozer</author>
    <created_on>2025-05-12</created_on>
    <version>1.0</version>
  </info>
</kcd_mod>
"""
    with open(os.path.join(mod_dir, "mod.manifest"), 'w', encoding='utf-8') as f:
        f.write(manifest)
    shutil.rmtree(TEMP_FOLDER)

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("dark-blue")

class CompanionRenamerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Name Thy Companions")
        self.geometry("420x460")
        self.resizable(False, False)
        self.center_window()

        self.entries = {}
        self.setup_ui()

    def center_window(self):
        self.update_idletasks()
        w = self.winfo_width()
        h = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (w // 2)
        y = (self.winfo_screenheight() // 2) - (h // 2)
        self.geometry(f"{w}x{h}+{x}+{y}")

    def setup_ui(self):
        frame = ctk.CTkFrame(self)
        frame.pack(padx=20, pady=20, fill="both", expand=True)

        ctk.CTkLabel(frame, text="Ozer's Companion Renamer", font=ctk.CTkFont(size=20, weight="bold")).pack(pady=(10, 20))

        self.entries["Pebbles"] = self._add_entry(frame, "New Name for Pebbles")
        self.entries["Herring"] = self._add_entry(frame, "New Name for Herring")
        self.entries["Mutt"] = self._add_entry(frame, "New Name for Mutt")
        self.entries["Mods Folder"] = self._add_entry(frame, "Mods Folder")

        browse_button = ctk.CTkButton(frame, text="Browse Files", command=self.browse_folder)
        browse_button.pack(pady=(5, 10))

        self.progress_bar = ctk.CTkProgressBar(frame, width=250)
        self.progress_bar.set(0)
        self.progress_bar.pack(pady=(5, 10))

        submit_button = ctk.CTkButton(frame, text="Finalize Mod", command=self.on_submit)
        submit_button.pack(pady=(10, 10))

        self.status_label = ctk.CTkLabel(frame, text="", font=ctk.CTkFont(size=12))
        self.status_label.pack(pady=(5, 10))

    def _add_entry(self, parent, label):
        ctk.CTkLabel(parent, text=label + ":").pack()
        entry = ctk.CTkEntry(parent, width=250)
        entry.pack(pady=5)
        return entry

    def browse_folder(self):
        path = filedialog.askdirectory()
        if path:
            self.entries["Mods Folder"].delete(0, 'end')
            self.entries["Mods Folder"].insert(0, path)

    def on_submit(self):
        peb = self.entries["Pebbles"].get().strip()
        her = self.entries["Herring"].get().strip()
        mut = self.entries["Mutt"].get().strip()
        base = self.entries["Mods Folder"].get().strip()

        if not all([peb, her, mut, base]):
            self.status_label.configure(text="Error: All fields required.")
            return

        threading.Thread(target=self.build_mod, args=(peb, her, mut, base), daemon=True).start()

    def build_mod(self, peb, her, mut, base):
        self.progress_bar.set(0.1)
        xml_text = replace_names(peb, her, mut)
        self.progress_bar.set(0.2)
        prepare_temp(xml_text)
        for idx, pak in enumerate(PAK_NAMES):
            pack_pak(pak)
            self.progress_bar.set(0.2 + 0.6 * ((idx + 1) / len(PAK_NAMES)))
        move_paks(base)
        self.progress_bar.set(1.0)
        self.status_label.configure(text="Mod build completed.")

if __name__ == "__main__":
    app = CompanionRenamerApp()
    app.mainloop()
